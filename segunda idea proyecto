# Paralelización de Simulación de Tráfico Integrando un Modelo Existente

## Descripción

Este proyecto se enfoca en mejorar la eficiencia de una simulación de tráfico existente mediante la paralelización de la actualización del estado de cada vehículo. Utilizamos el modelo de dinámica vehicular del repositorio [trafficSimulator](https://github.com/BilHim/trafficSimulator) de BilHim, el cual ya implementa la lógica de movimiento, aceleración y frenado de los coches. Nuestro aporte es integrar este modelado en una estructura paralela, de forma que cada vehículo se actualice de manera independiente y concurrente, aprovechando los múltiples núcleos de la CPU.

## ¿Por Qué Este Proyecto?

- **Reutilización de un Modelo Validado:**  
  En lugar de desarrollar desde cero el comportamiento de los vehículos, utilizamos un modelado probado que simula de manera realista la dinámica de cada coche. Esto nos permite centrarnos en mejorar el rendimiento de la simulación.

- **Eficiencia a Gran Escala:**  
  La actualización individual de cada vehículo es una tarea que puede ejecutarse de forma autónoma. Al paralelizar esta operación, podemos simular escenarios con un gran número de vehículos en menos tiempo.

- **Aplicación Práctica de Concurrencia:**  
  Este proyecto es un excelente ejemplo para aprender y aplicar técnicas de paralelización en C++ utilizando `std::thread` o librerías similares. Además, resalta la importancia de la sincronización en puntos críticos (por ejemplo, en intersecciones) sin afectar la independencia de cada vehículo.

## ¿Qué Vamos a Hacer?

- **Integrar el Modelo Existente:**  
  Utilizaremos el código del repositorio [trafficSimulator](https://github.com/BilHim/trafficSimulator) para modelar la dinámica vehicular.

- **Paralelizar la Simulación:**  
  Nuestra tarea principal es asignar la actualización de cada vehículo a un hilo independiente. Cada hilo se encargará de ejecutar la lógica de movimiento y actualización definida en el modelo preexistente.

- **Sincronización en Salidas Críticas:**  
  Aunque la actualización de cada vehículo es independiente, se utilizarán mecanismos de sincronización (como mutex) para coordinar la salida en consola o la interacción en zonas críticas de la red de transporte.

## Herramientas y Tecnologías

- **Lenguaje:** C++
- **Librerías Utilizadas:**
  - `<thread>` para gestionar la concurrencia.
  - `<mutex>` para la sincronización en zonas críticas.
  - `<vector>`, `<chrono>`, `<iostream>` y otras del estándar C++ para manejo de datos, temporización y entrada/salida.
- **Repositorio Base:** [trafficSimulator](https://github.com/BilHim/trafficSimulator)
- **Compilador:** C++11 o superior (g++ o clang++)

## Ejemplo de Implementación

El siguiente ejemplo muestra cómo se puede paralelizar la actualización de cada vehículo usando el modelo existente:

```cpp
#include <iostream>
#include <thread>
#include <vector>
#include <chrono>
#include <mutex>
